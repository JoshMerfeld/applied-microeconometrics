ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
bbox$id <- 1:nrow(bbox)
ggplot() + geom_sf(data = kenya) + geom_sf(data = bbox)
it_obj <- s_obj %>%
stac_search(collections = "landsat-c2-l2",
bbox = kbbox,
datetime = "2021-11-01/2022-02-28",
limit = 550) %>%
ext_filter(`eo:cloud_cover` <= 15) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# check whether bbox overlaps with kenya
links <- paste0("/vsicurl/", it_obj$features[[1]]$assets$red$href)
bbox <- st_as_sf(st_as_sfc(st_bbox(c(xmin = it_obj$features[[1]]$bbox[1],
ymin = it_obj$features[[1]]$bbox[2],
xmax = it_obj$features[[1]]$bbox[3],
ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
bbox$id <- 1:nrow(bbox)
ggplot() + geom_sf(data = kenya) + geom_sf(data = bbox)
nrow(bbox)
r <- rast(links[[1]])
r <- project(r, "EPSG:4326")
count <- 2
for (i in links[2:length(links)]){
tempr <- rast(i)
tempr <- project(tempr, r)
r <- mosaic(r, tempr, fun = "min")
print(count/length(links))
count <- count + 1
}
r
ggplot() +
geom_spatraster(data = r, aes(fill = )) +
scale_fill_distiller("Red", palette = "Reds") +
geom_sf(data = kenya, fill = "transparent")
?mosaic
# get coordinates of top-left corner of boxes
bbox$coords <- st_coordinates(st_centroid(bbox))
bbox
bbox$x[1]
# get coordinates of top-left corner of boxes
kbbox
# download one raster
r <- rast(links[[1]])
library(rstac)
library(terra)
library(tidyterra)
library(tidyverse)
library(sf)
kenya <- read_sf("/Users/Josh/Downloads/ken_adm_iebc_20191031_shp/ken_admbnda_adm0_iebc_20191031.shp")
kenyatr <- vect("/Users/Josh/Downloads/ken_adm_iebc_20191031_shp/ken_admbnda_adm0_iebc_20191031.shp")
# "loop 0 is not valid" so turn off spherical
sf_use_s2(FALSE)
kenya <- st_transform(kenya, crs = "EPSG:4326")
kbbox <- st_bbox(kenya)
kbboxspatial <- st_as_sfc(st_bbox(kenya))
s_obj <- stac("https://planetarycomputer.microsoft.com/api/stac/v1/")
it_obj <- s_obj %>%
stac_search(collections = "landsat-c2-l2",
bbox = kbbox,
datetime = "2021-11-01/2022-02-28",
limit = 550) %>%
ext_filter(`eo:cloud_cover` <= 15) %>%
get_request() %>%
items_sign(sign_fn = sign_planetary_computer())
# check whether bbox overlaps with kenya
links <- paste0("/vsicurl/", it_obj$features[[1]]$assets$red$href)
bbox <- st_as_sf(st_as_sfc(st_bbox(c(xmin = it_obj$features[[1]]$bbox[1],
ymin = it_obj$features[[1]]$bbox[2],
xmax = it_obj$features[[1]]$bbox[3],
ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
bbox$id <- 1:nrow(bbox)
ggplot() + geom_sf(data = bbox)
bbox <- st_transform(bbox, crs = "EPSG:32637")
ggplot() + geom_sf(data = bbox)
# get centroid coordinates
bbox$centroid <- st_centroid(bbox)
bbox
bbox$centroid$x
bbox$centroid[[1]]$x
bbox$centroid[[1]][1]
bbox$centroid[[1]][[1]]
bbox$centroid <- st_coordinates(bbox$centroid)
bbox
bbox <- bbox |>
arrange(centroid.Y, centroid.X)
bbox <- bbox |>
arrange(`centroid.Y`, `centroid.X`)
bbox <- bbox |>
order(centroid.Y, centroid.X)
bbox <- bbox |>
arrange(centroid.Y, centroid.X)
bbox <- bbox |>
arrange(`centroid.Y`, `centroid.X`)
bbox <- bbox |>
rename(lat = `centroid.Y`, lon = `centroid.X`)
bbox <- bbox |>
rename(lat = centroid.Y, lon = centroid.X)
colnames(bbox) <- c("x", "id", "lon", "lat")
colnames(bbox) <- c(id", "lon", "lat")
colnames(bbox) <- c("id", "lon", "lat")
bbox
# check whether bbox overlaps with kenya
links <- paste0("/vsicurl/", it_obj$features[[1]]$assets$red$href)
bbox <- st_as_sf(st_as_sfc(st_bbox(c(xmin = it_obj$features[[1]]$bbox[1],
ymin = it_obj$features[[1]]$bbox[2],
xmax = it_obj$features[[1]]$bbox[3],
ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
bbox$id <- 1:nrow(bbox)
bbox
bbox$geometry
# set geometry as column x
bbox <- st_set_geometry(bbox, "x")
bbox
colnames(bbox)
# check whether bbox overlaps with kenya
links <- paste0("/vsicurl/", it_obj$features[[1]]$assets$red$href)
bbox <- st_as_sf(st_as_sfc(st_bbox(c(xmin = it_obj$features[[1]]$bbox[1],
ymin = it_obj$features[[1]]$bbox[2],
xmax = it_obj$features[[1]]$bbox[3],
ymax = it_obj$features[[1]]$bbox[4]),
crs = st_crs(4326))))
for (i in 2:length(it_obj$features)) {
temp <- st_as_sfc(st_bbox(c(xmin = it_obj$features[[i]]$bbox[1],
ymin = it_obj$features[[i]]$bbox[2],
xmax = it_obj$features[[i]]$bbox[3],
ymax = it_obj$features[[i]]$bbox[4]),
crs = st_crs(4326)))
bbox <- bind_rows(bbox, st_as_sf(temp))
links <- c(links, paste0("/vsicurl/", it_obj$features[[i]]$assets$red$href))
}
# set geometry as column x
bbox <- st_set_geometry(bbox, "x")
bbox
# set geometry as column x
bbox <- st_set_geometry(bbox, "x")
bbox
colnames(bbox)
colnames(bbox) <- c("geometry")
bbox
bbox <- st_set_geometry(bbox, "geometry")
bbox
bbox$id <- 1:nrow(bbox)
bbox$
bbox
# get coordinates of centroid
bbox$centroid <- st_centroid(bbox)
bbox$centroid <- st_coordinates(bbox$centroid)
bbox
colnames(bbox)
bbox$centroid
bbox$centroid[1]
bbox$centroid[[1]]
bbox$centroid$X
dim(bbox$centroid)
names(bbox$centroid)
colnames(bbox$centroid)
bbox$centroid[["X"]]
bbox$centroid$X
bbox$centroid$centroid.X
bbox |> arrange(centroid)
bbox <- bbox |>
arrange(centroid)
# download one raster
r <- rast(links[[1]])
# reorder links
links <- links[bbox$id]
links
bbox$id
# reorder links
links <- links[bbox$id]
# download one raster
r <- rast(links[[1]])
count <- 1
for (i in links[1:length(links)]){
tempr <- rast(i)
r <- mosaic(r, tempr, fun = "min")
print(count/length(links))
count <- count + 1
}
library(knitr)
library(sf)
library(sp)
library(tidyverse)
library(gganimate)
library(transformr)
library(gifski)
library(ggthemes)
library(scales)
library(RColorBrewer)
library(kableExtra)
library(ggpubr)
library(rticles)
library(stats)
library(broom)
library(extrafont)
library(fixest)
library(modelsummary)
library(openxlsx)
library(raster)
library(lubridate)
library(png)
library(cowplot)
library(did2s)
library(haven)
library(parallel)
library(magick)
theme_set(theme_bw())
loadfonts()  # Must be run once in each session (markdown is a new "session" each time you render/knit)
# Functions to change format of numbers
reportP <- function(pValue){
if (pValue < 0.001){
result <- "p < 0.001"
} else {
result <- sprintf("p = %.3f", pValue) # inserts a float into a string and simultaneously do rounding
}
return(result)
}
reportDec <- function(dec){
result <- sprintf("%.3f", dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
reportPercent <- function(dec){
result <- sprintf("%.1f", 100*dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
commaNum <- function(large){
result <- formatC(large, big.mark = ",", format = "f", digits = 0)
return(result)
}
# Let's create some data for Kabani
kabani <- as_tibble(matrix(NA, nrow = 24, ncol = 1))
colnames(kabani) <- c("date")
kabani$date <- seq.Date(from = as.Date("2022-05-01"), by = "month", length.out = 24)
kabani$povertyline <- 1.9
kabani$meanincome <- c(rep(1.69, 12), rep(1.83, 12))
kabani$income <- c(1.31, 0.79, 2.47, 1.22, 1.69, 1.45, 1.41, 1.05, 4.01, 0.91, 0.96,
2.94, 2.15, 2.06, 1.18, 1.21, 1.73, 3.29, 2.29, 1.27, 1.89, 1.66, 1.39, 1.79)
kabani$poorannual <- "Poor"
kabani$poorx <- 0.5
kabani$poormonthly <- "Poor"
kabani$poormonthly[kabani$income>=kabani$povertyline] <- "Not poor"
kabani2 <- kabani %>%
mutate(datex = date) %>%
dplyr::select(-date)
kabani2$income <- kabani2$income + 0.25
kabani2$income[kabani2$poormonthly=="Poor"] <- kabani2$income[kabani2$poormonthly=="Poor"] - 0.5
# NOTE THE ABSOLUTE PATH!
# bad practice, but I don't want to make this data availalble on Github yet.
icrisat <- read_dta("/Users/Josh/Dropbox/Papers/merfeldmorduch2/data/icrisat/icrisat.dta")
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
results
nrow(results)
ggplot(results) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(hist<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
ggplot(results %>% filter(sim<=1000)) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(temp)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
results$temp <- 1
results
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp
temp <- as_tibble(temp)
summary(temp |> filter(hist<=1000))
ggplot(temp %>% filter(hist<=1000)) +
geom_histogram(aes(x = results), color = "#006334", binwidth = 0.0005) +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
annualmean <- weighted.mean(icrisat$in_poverty_wave, icrisat$weight)
monthlymean <- weighted.mean(icrisat$in_poverty, icrisat$weight)
temp <- icrisat
# wrapper <- function(i){
#   set.seed(23405 + i)
#   temp$random <- runif(nrow(temp))
#   return <- c(temp %>%
#     group_by(hhid, year) %>%
#     arrange(hhid, year, random) %>%
#     filter(row_number()==1) %>%
#     ungroup() %>%
#     summarize(in_poverty = weighted.mean(in_poverty, weight)) %>%
#     pull(in_poverty))
# }
# results <- mclapply(1:10000, wrapper)
# # saving so I don't have to run this every time I want to knit
# saveRDS(results, "results.rds")
results <- readRDS("results.rds")
results <- unlist(results)
results <- as_tibble(results)
colnames(results) <- "results"
results$sim <- 1:nrow(results)
temp <- c()
for (i in 1:1000){
temp <- rbind(temp, cbind(results[1:i,], hist = i))
}
temp <- as_tibble(temp)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results, y = after_stat(count / sum(count))), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results)), color = "transparent", fill = "transparent") +
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent", fill = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
ggplot(temp %>% filter(hist %in% c(999, 1000))) +
geom_histogram(aes(x = results), color = "transparent") +
geom_vline(xintercept = monthlymean, color = "#777d78", linetype = "dashed") +
geom_vline(xintercept = annualmean, color = "#340063", linetype = "dashed") +
labs(x = "Mean", y = "Count") +
scale_x_continuous(breaks = seq(from = 0.28, to = 0.42, by = 0.02), limits = c(0.28, 0.42)) +
scale_y_continuous(breaks = seq(from = 0, to = 50, by = 10), limits = c(0, 50)) +
annotate("text", label = "Annual mean\n(low-frequency mean)", x = annualmean, y = 10, color = "#340063") +
annotate("text", label = "Monthly mean\n(high-frequency mean)", x = monthlymean, y = 10, color = "#777d78") +
transition_states(hist, state_length = 1, transition_length = 2)
temp
library(haven)
temp <- read_sav("/Users/Josh/Dropbox/Papers/malawiimagery/data/mics/Malawi MICS6 SPSS Datasets/hl.sav")
View(temp)
setwd("/Users/Josh/Dropbox/KDIS/Classes/applied-microeconometrics")
install.packages("fixest")
install.packages('modelsummary')
setwd("~/Dropbox/KDIS/Classes/applied-microeconometrics")
knitr::opts_chunk$set(echo = FALSE, dev = "png") # NOTE: switched to png instead of pdf to decrease size of the resulting pdf
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
x <- def.chunk.hook(x, options)
#ifelse(options$size != "a", paste0("\n \\", "tiny","\n\n", x, "\n\n \\normalsize"), x)
ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
library(tidyverse)
library(kableExtra)
library(fixest)
library(ggpubr)
library(RColorBrewer)
library(haven)
library(fwildclusterboot)
library(modelsummary)
ckdata <- read_csv("week5files/cardkruegerlong.csv")
df <- read_dta("week5files/castle.dta")
# homicide_c to rate
df$homicide_c <- (df$homicide_c/df$population)*100000
# and log
df$homicide_c <- log(df$homicide_c)
df
table(df$state)
table(df$sid)
install.packages("twowayfeweights")
install.packages("TwoWayFEWeights")
