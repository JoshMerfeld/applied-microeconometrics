filter(!is.na(xgbMean))
ggplot() +
geom_spatvector(data = mwshp, aes(fill = xgbMean), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
statistics
library(sf)
library(sp)
library(tidyverse)
library(scales)
library(RColorBrewer)
library(kableExtra)
library(ggpubr)
library(rticles)
library(stats)
library(broom)
library(extrafont)
library(fixest)
library(glmnet)
library(modelsummary)
loadfonts()  # Must be run once in each session (markdown is a new "session" each time you render/knit)
# Sets wd to folder this script is in so we can create relative paths instead of absolute paths
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# We want to get the wd up to the main folder
# Need to go up two levels
setwd('..')
setwd('..')
# Double check
getwd()    # check
reportP <- function(pValue){
if (pValue < 0.001){
result <- "p < 0.001"
} else {
result <- sprintf("p = %.3f", pValue) # inserts a float into a string and simultaneously do rounding
}
return(result)
}
reportDec <- function(dec){
result <- sprintf("%.3f", dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
reportPercent <- function(dec){
result <- sprintf("%.1f", 100*dec) # inserts a float into a string and simultaneously do rounding
return(result)
}
commaNum <- function(large){
result <- formatC(large, big.mark = ",")
return(result)
}
# Size of censuses. Need to have the data
dataMal <- as_tibble(read_csv("data/malawi/census20/cleanConsALL.csv"))
dataMal <- dataMal %>% dplyr::select(tacode, eacode, hhsize, poor, logExpPC)
dataMal <- dataMal %>% mutate(eacode = paste0(tacode, "_", eacode))
dataMad <- as_tibble(read_csv("data/madagascar/censusHouseholdsClean.csv"))
dataMad <- dataMad %>% dplyr::select(ADM3_PCODE, ADM4_PCODE, hhsize, poor = poorhh)
dataMoz <- as_tibble(read_csv("data/mozambique/census17/truth.csv"))
ids <- read_csv("data/mozambique/identifiers.csv")
# Add identifiers to features
dataMoz <- ids %>% dplyr::select(enumerationAreaID, locID) %>% left_join(dataMoz, by = "enumerationAreaID")
dataMoz <- dataMoz %>% dplyr::select(enumerationAreaID, locID, assetIndex)
dataSri <- as_tibble(read_csv("data/sriLanka/census12/truth.csv"))
dataSri <- dataSri %>% dplyr::select(dsd_c, gnd_c, hhsize, assetIndex)
# And these are the results
madagascar <- readRDS("results/clean/madagascarResults.rds")
malawiAssets <- readRDS("results/clean/malawiAssetsResults.rds")
malawiPoor <- readRDS("results/clean/malawiPoorResults.rds")
mozambique <- readRDS("results/clean/mozambiqueResults.rds")
sriLanka <- readRDS("results/clean/sriLankaResults.rds")
statistics <- readRDS("results/clean/statisticsAll.rds")
statisticsLASSO <- readRDS("results/clean/statisticsAllLASSO.rds")
statisticsArea <- readRDS("results/clean/statisticsAreaAll.rds")
# The results with the SAE log shift
madagascarLogShiftSAE <- readRDS("results/clean/madagascarResultsLogShiftSAE.rds")
malawiAssetsLogShiftSAE <- readRDS("results/clean/malawiAssetsResultsLogShiftSAE.rds")
malawiPoorLogShiftSAE <- readRDS("results/clean/malawiPoorResultsLogShiftSAE.rds")
mozambiqueLogShiftSAE <- readRDS("results/clean/mozambiqueResultsLogShiftSAE.rds")
sriLankaLogShiftSAE <- readRDS("results/clean/sriLankaResultsLogShiftSAE.rds")
statisticsLogShiftSAE <- readRDS("results/clean/statisticsAllLogShiftSAE.rds")
statisticsAreaLogShiftSAE <- readRDS("results/clean/statisticsAreaAllLogShiftSAE.rds")
statistics
statistics[[1]]
malawiPoor[[1]]
summary(malawiPoor[[1]])
summary(malawiPoor[[2]])
malawiPoor[[1]]
ihs5 <- read_dta("data/ihs5_consumption_aggregate.dta")
ihs5
colnames(ihs5)
ihs5 <- ihs5 |>
mutate(TA_CODE = as.character(TA)) |>
group_by(TA_CODE) |>
summarize(poor = weighted.mean(poor, hhsize*hh_wgt)) |>
ungroup()
ihs5
ihs5 <- read_dta("data/ihs5_consumption_aggregate.dta")
ihs5
ihs5 <- ihs5 |>
group_by(district) |>
summarize(poor = weighted.mean(poor, hhsize*hh_wgt)) |>
ungroup()
mwshp
mwshp$district <- substr(mwshp$TA_CODE, 1, 3)
district <- aggregate(mwshp, "district")
mwshp <- vect("data/mwtas.shp")
mwshp$district <- substr(mwshp$TA_CODE, 1, 3)
district <- aggregate(mwshp, "district")
temp <- read_csv("data/malawiresults.csv")
temp <- temp |>
mutate(TA_CODE = as.character(TA_CODE)) |>
dplyr::select(TA_CODE, xgbMean)
mwshp <- mwshp |>
left_join(temp, by = "TA_CODE") |>
filter(!is.na(xgbMean))
district <- district |>
left_join(ihs5, by = "district")
ihs5 <- read_dta("data/ihs5_consumption_aggregate.dta")
ihs5 <- ihs5 |>
group_by(district) |>
summarize(poor = weighted.mean(poor, hhsize*hh_wgt)) |>
ungroup() |>
mutate(district = as.character(district))
district <- district |>
left_join(ihs5, by = "district")
temp <- read_csv("data/malawiresults.csv")
temp <- temp |>
mutate(TA_CODE = as.character(TA_CODE)) |>
dplyr::select(TA_CODE, xgbMean)
mwshp <- mwshp |>
left_join(temp, by = "TA_CODE") |>
filter(!is.na(xgbMean))
temp <- read_csv("data/malawiresults.csv")
temp <- temp |>
mutate(TA_CODE = as.character(TA_CODE)) |>
dplyr::select(TA_CODE, xgbMean)
mwshp <- mwshp |>
left_join(temp, by = "TA_CODE") |>
filter(!is.na(xgbMean))
mwshp <- vect("data/mwtas.shp")
mwshp$district <- substr(mwshp$TA_CODE, 1, 3)
district <- aggregate(mwshp, "district")
district <- district |>
left_join(ihs5, by = "district")
temp <- read_csv("data/malawiresults.csv")
temp <- temp |>
mutate(TA_CODE = as.character(TA_CODE)) |>
dplyr::select(TA_CODE, xgbMean)
mwshp <- vect("data/mwtas.shp")
mwshp$district <- substr(mwshp$TA_CODE, 1, 3)
district <- aggregate(mwshp, "district")
district <- district |>
left_join(ihs5, by = "district")
temp <- read_csv("data/malawiresults.csv")
temp <- temp |>
mutate(TA_CODE = as.character(TA_CODE)) |>
dplyr::select(TA_CODE, xgbMean)
temp
mwshp
mwshp <- mwshp |>
left_join(temp, by = "TA_CODE") |>
filter(!is.na(xgbMean))
g1 <- ggplot() +
geom_spatvector(data = district, aes(fill = poor), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral") +
labs(subtitle = "A. Survey (adm2)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = mwshp, aes(fill = xgbMean), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral") +
labs(subtitle = "B. Small areas (adm3)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g1 <- ggplot() +
geom_spatvector(data = district, aes(fill = poor), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral", limits = c(min(mwshp$xgbMean), max(mwshp$xgbMean))) +
labs(subtitle = "A. Survey (adm2)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = mwshp, aes(fill = xgbMean), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral") +
labs(subtitle = "B. Small areas (adm3)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
g2 <- ggplot() +
geom_spatvector(data = mwshp, aes(fill = xgbMean), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral") +
labs(subtitle = "B. Small areas (adm3)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(g1, g2) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
mwshp <- vect("data/mwtas.shp")
temp <- read_csv("data/malawiresults.csv")
temp <- temp |>
mutate(TA_CODE = as.character(TA_CODE)) |>
dplyr::select(TA_CODE, xgbMean)
mwshp <- mwshp |>
left_join(temp, by = "TA_CODE") |>
filter(!is.na(xgbMean))
mwshp$district <- substr(mwshp$TA_CODE, 1, 3)
district <- aggregate(mwshp, "district")
g1 <- ggplot() +
geom_spatvector(data = district, aes(fill = poor), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral", limits = c(min(mwshp$xgbMean), max(mwshp$xgbMean))) +
labs(subtitle = "A. Survey (adm2)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.position = "bottom")
g2 <- ggplot() +
geom_spatvector(data = mwshp, aes(fill = xgbMean), color = NA) +
scale_fill_distiller("Poverty\nrate", palette = "Spectral") +
labs(subtitle = "B. Small areas (adm3)") +
theme_bw() +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.position = "bottom")
legend <- get_plot_component(g1, "guide-box-bottom") +
theme(legend.background = element_rect(fill = "NA", color = "NA"))
legend
legend <- get_plot_component(g1, "guide-box") +
theme(legend.background = element_rect(fill = "NA", color = "NA"))
legend
plot_components(g1)
legend <- get_plot_component(g1, "guide-box")[[17]] +
theme(legend.background = element_rect(fill = "NA", color = "NA"))
theme
legend
legend <- get_plot_component(g1, "guide-box")[[2]] +
theme(legend.background = element_rect(fill = "NA", color = "NA"))
legend
legend <- get_plot_component(g1, "guide-box", return_all = TRUE) +
theme(legend.background = element_rect(fill = "NA", color = "NA"))
legend
plot_components(g1)
legend <- plot_components(g1)[[17]] +
theme(legend.background = element_rect(fill = "NA", color = "NA"))
legend
plot_components(g1)[[17]]
legend <- plot_components(g1)[[17]]
legend
toprow <- plot_grid(g1 + theme(legend.position = NA), g2 + theme(legend.position = NA)) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
legend <- plot_components(g1)[[17]]
toprow <- plot_grid(g1 + theme(legend.position = "none"), g2 + theme(legend.position = "none")) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
toprow
?plot_grid
plot_grid(toprow, legend, rel_heights = c(1, 0.1)) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
plot_grid(toprow, legend, rel_heights = c(1, 0.1)) +
theme(plot.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb")) +
theme(legend.background = element_rect(fill = "#f0f1eb", color = "#f0f1eb"))
setwd("~/Dropbox/Papers/roads")
# roads count
library(pbmcapply)
# using sf for st_difference
library(sf)
sf_use_s2(FALSE)
library(terra)
library(tidyterra)
library(tidyverse)
library(fixest)
grid <- vect("data/shape/grid.shp")
grid <- project(grid, "EPSG:4326")
grid10 <- vect("data/shape/grid10donut.shp")
grid25 <- vect("data/shape/grid25donut.shp")
grid50 <- vect("data/shape/grid50donut.shp")
# now only keep the parts that intersect with the shapefile itself
grid10 <- terra::intersect(grid10, grid)
grid10 <- aggregate(grid10, "id")
grid25 <- terra::intersect(grid25, grid)
grid25 <- aggregate(grid25, "id")
grid50 <- terra::intersect(grid50, grid)
grid50 <- aggregate(grid50, "id")
# events
events <- vect("data/acledgrid.shp") |>
dplyr::select(year, type = evnt_ty, deaths = fatalts)
events <- project(events, "EPSG:4326")
events <- terra::intersect(grid, events)
events <- as_tibble(events) |>
dplyr::select(id, year, type, deaths)
# rename "type"
events <- events |>
mutate(type = case_when(
type == "Battles" ~ "battle",
type == "Explosions/Remote violence" ~ "explosion",
type == "Protests" ~ "protest",
type == "Riots" ~ "riot",
type == "Strategic developments" ~ "strategic",
type == "Violence against civilians" ~ "civviolence"
))
events <- events |>
group_by(id, year, type) |>
summarize(deaths = sum(deaths, na.rm = TRUE),
events = n()) |>
ungroup()
# long to wide by
events <- events |>
pivot_wider(names_from = type, values_from = c(deaths, events), values_fill = 0)
years <- 2014:2023
ids <- unique(grid$id)
events <- expand.grid(year = years, id = ids) |>
left_join(events, by = c("year", "id"))
# all missings to zero
events[is.na(events)] <- 0
# join
grid <- grid |>
left_join(events, by = "id")
# if ALWAYS zero, drop
cols <- names(grid |> select(starts_with("events_")))
grid$temp <- apply(as_tibble(grid[,cols]), 1, "sum")
grid <- grid |>
group_by(id) |>
filter(max(temp)>0) |>
ungroup() |>
dplyr::select(-temp)
# save
saveRDS(as_tibble(grid), "data/aclednew.rds")
# just one grid each
grid <- grid |>
dplyr::select(id) |>
group_by(id) |>
filter(row_number()==1) |>
ungroup()
# create areas
grid$area <- expanse(grid, unit = "km")
grid10 <- grid10 |>
filter(id %in% grid$id)
grid25 <- grid25 |>
filter(id %in% grid$id)
grid50 <- grid50 |>
filter(id %in% grid$id)
# make sure all in the same order (they should be, but just in case)
grid <- grid |>
arrange(id)
grid10 <- grid10 |>
arrange(id)
grid25 <- grid25 |>
arrange(id)
grid50 <- grid50 |>
arrange(id)
# now the area
grid$areabuffer10donut <- expanse(grid10, unit = "km")
grid$areabuffer25donut <- expanse(grid25, unit = "km")
grid$areabuffer50donut <- expanse(grid50, unit = "km")
# Finally, estimate population by YEAR (need it for 2021-2023)
gridexpand <- as_tibble(grid) |>
expand(id, year = 2014:2023)
gridexpand <- grid |>
left_join(gridexpand, by = "id") |>
dplyr::select(id, year)
r <- rast(paste0("data/worldpop/2014.tif"))
for (i in 2015:2020){
r <- c(r, rast(paste0("data/worldpop/", i, ".tif")))
}
r[is.na(r)] <- 0
r <- as.points(r)
r$x <- geom(r)[,"x"]
r$y <- geom(r)[,"y"]
# now to tibble
r <- as_tibble(r)
r$`2021` <- NA
r$`2022` <- NA
r$`2023` <- NA
r <- r |>
mutate(id = row_number())
# wide to long
r <- r |>
pivot_longer(cols = -c(x, y, id), names_to = "year", values_to = "pop") |>
mutate(year = as.numeric(year))
results <- feols(pop ~ 1 | id[year],
data = as_tibble(r))
# predict
r$pophat <- predict(results, newdata = as_tibble(r))
r$pop[r$year>2020] <- r$pophat[r$year>2020]
# zero if negative
r$pop[r$pop<0] <- 0
r <- r |>
dplyr::select(-pophat)
i = 2023
# now to raster
temp <- rast(paste0("data/worldpop/", i, ".tif"))
i = 2023
i
# now to raster
temp <- rast("data/worldpop/2014.tif")
temp <- rast(extent = temp, nrows = nrow(temp), res = res(temp), ncols = ncol(temp), crs = crs(temp), values = as.data.frame(r[r$year==i,]))
r
temp
summary(temp)
# all rasters are smae size. load 2014
temp2 <- rast("data/worldpop/2014.tif")
summary(temp2)
# create raster from values above
temp <- rast(extent = temp,
nrows = nrow(temp),
res = res(temp),
ncols = ncol(temp),
crs = crs(temp))
values(temp) <- as.data.frame(r[r$year==i,])
?matrix
matrix(as.data.frame(r[r$year==i,]), nrow = nrow(temp), ncol = ncol(temp))
dim(matrix(as.data.frame(r[r$year==i,]), nrow = nrow(temp), ncol = ncol(temp)))
summary(matrix(as.data.frame(r[r$year==i,]), nrow = nrow(temp), ncol = ncol(temp)))
matrix(r[r$year==i,])
matrix(r[r$year==i,], nrow = nrow(temp), ncol = ncol(temp))
# save 2021-2023 as raster
for (i in 2021:2023){
# all rasters are smae size. load 2014
temp <- rast("data/worldpop/2014.tif")
# create raster from values above
temp <- rast(extent = temp,
nrows = nrow(temp),
res = res(temp),
ncols = ncol(temp),
crs = crs(temp))
values(temp) <- matrix(r[r$year==i,], nrow = nrow(temp), ncol = ncol(temp))
writeRaster(temp, paste0("data/worldpop/", i, ".tif"))
}
# save 2021-2023 as raster
for (i in 2021:2023){
# all rasters are smae size. load 2014
temp <- rast("data/worldpop/2014.tif")
# create raster from values above
temp <- rast(extent = temp,
nrows = nrow(temp),
res = res(temp),
ncols = ncol(temp),
crs = crs(temp))
values(temp) <- matrix(as.data.frame(r[r$year==i,]), nrow = nrow(temp), ncol = ncol(temp))
writeRaster(temp, paste0("data/worldpop/", i, ".tif"))
}
# save 2021-2023 as raster
for (i in 2021:2023){
# all rasters are smae size. load 2014
temp <- rast("data/worldpop/2014.tif")
# create raster from values above
temp <- rast(extent = temp,
nrows = nrow(temp),
res = res(temp),
ncols = ncol(temp),
crs = crs(temp))
values(temp) <- as.vector(as.data.frame(r[r$year==i,]), nrow = nrow(temp), ncol = ncol(temp))
writeRaster(temp, paste0("data/worldpop/", i, ".tif"))
}
# save 2021-2023 as raster
for (i in 2021:2023){
# all rasters are smae size. load 2014
temp <- rast("data/worldpop/2014.tif")
# create raster from values above
temp <- rast(extent = temp,
nrows = nrow(temp),
res = res(temp),
ncols = ncol(temp),
crs = crs(temp))
values(temp) <- as.vector(as.data.frame(r[r$year==i,]))
writeRaster(temp, paste0("data/worldpop/", i, ".tif"))
}
as.vector(as.data.frame(r[r$year==i,]))
as.vector(as.data.frame(r[r$year==i,]))$pop
# save 2021-2023 as raster
for (i in 2021:2023){
# all rasters are smae size. load 2014
temp <- rast("data/worldpop/2014.tif")
# create raster from values above
temp <- rast(extent = temp,
nrows = nrow(temp),
res = res(temp),
ncols = ncol(temp),
crs = crs(temp))
values(temp) <- as.vector(as.data.frame(r[r$year==i,]))$pop
writeRaster(temp, paste0("data/worldpop/", i, ".tif"))
}
temp
ggplot() + geom_spatraster(data = temp)
ggplot() + geom_spatraster(data = temp[temp$lyr.1>0,])
ggplot() + geom_spatraster(data = temp[temp$lyr.1>0])
ggplot() + geom_spatraster(data = temp[temp$`lyr.1`>0])
ggplot() + geom_spatraster(data = temp[temp>0])
ggplot() + geom_spatraster(data = temp[temp>0,])
temp
temp2 <- temp
temp2[temp2==0] <- NA
temp2
ggplot() + geom_spatraster(data = temp2)
ggplot() + geom_spatraster(data = log(temp2))
ggplot() + geom_spatraster(data = log(temp2)) + scale_fill_distiller(palette = "Spectral")
# all rasters are smae size. load 2014
temp3 <- rast("data/worldpop/2014.tif")
g1 <- ggplot() + geom_spatraster(data = log(temp2)) + scale_fill_distiller(palette = "Spectral")
g2 <- ggplot() + geom_spatraster(data = log(temp3)) + scale_fill_distiller(palette = "Spectral")
library(cowplot)
plot_grid(g1, g2)
summary(temp2)
summary(temp3)
setwd("~/Dropbox/KDIS/Classes/applied-microeconometrics")
install.packages(c("tidyverse", "cowplot", "haven"))
